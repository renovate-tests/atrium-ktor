buildscript {
    project.group = "com.tegonal.atrium.ktor"
    project.version = "0.3.0"
    project.description = "Atrium assertion functions for Ktor types"

    ext {
        // main
        kotlin_version = '1.3.61'
        atrium_version = '0.8.0'
        ktor_version = '1.2.1'

        //test
        spek_version = '2.0.8'
        detekt_version = '1.2.0'

        srcAndResourcesFromJvmProject = { Project project ->
            def nameWithoutSuffix = project.name.substring(rootProject.name.length() + 1, project.name.lastIndexOf('-'))
            def jvmProject = prefixedProject(nameWithoutSuffix + '-jvm')
            project.sourceSets {
                main {
                    kotlin { srcDirs += ["${jvmProject.projectDir}/src/main/kotlin"] }
                    resources { srcDirs += ["${jvmProject.projectDir}/src/main/resources"] }
                }
                test {
                    resources { srcDirs += ["${jvmProject.projectDir}/src/test/resources"] }
                }
            }
        }
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    def tutteli_gradle_version = gradle.ext.tutteli_plugins_version
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("ch.tutteli:tutteli-gradle-kotlin-module-info:$gradle.ext.tutteli_plugins_version")
        classpath "ch.tutteli:tutteli-gradle-dokka:$tutteli_gradle_version"
        classpath "ch.tutteli:tutteli-gradle-kotlin-utils:$tutteli_gradle_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:$gradle.ext.tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-publish:$tutteli_gradle_version"
        classpath "ch.tutteli:tutteli-gradle-spek:$tutteli_gradle_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

apply plugin: "ch.tutteli.project.utils"
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version


allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: "io.gitlab.arturbosch.detekt"
detekt {
    failFast = true
    input = files(subprojects*.collect { it.projectDir })
    filters = ".*/resources/.*,.*$rootProject.name/.*/build/.*"
    config = files("$rootProject.projectDir/gradle/detekt.yml")
    reports {
        xml.enabled = true
    }
}

configureCommonProjects()
configureJsProjects()
configureJvmProjects()

def commonProjects = getCommonProjects()
def jsProjects = getJsProjects()
def jvmProjects = getJvmProjects()
def multiplatformProjects = commonProjects + jsProjects + jvmProjects

configure(commonProjects) {
    dependencies {
        implementation "ch.tutteli.atrium:atrium-cc-en_GB-robstoll-common:$atrium_version", excludeKotlin
        testImplementation "org.spekframework.spek2:spek-dsl-metadata:$spek_version"
    }
    //TODO activate as soon as https://youtrack.jetbrains.com/issue/KT-30580 is fixed
    compileTestKotlinCommon{
        kotlinOptions.allWarningsAsErrors = false
    }
}

configure(jsProjects) {
    dependencies {
        implementation "ch.tutteli.atrium:atrium-cc-en_GB-robstoll-js:$atrium_version", excludeKotlin
    }
}

configure(getJvmProjects() + (subprojects - multiplatformProjects)) {

    apply plugin: 'kotlin'

    apply plugin: 'ch.tutteli.dokka'
    tutteliDokka.githubUser = 'tegonal'

    apply plugin: 'ch.tutteli.spek'
    spek.version = spek_version

    apply plugin: 'ch.tutteli.kotlin.module.info'

    dependencies {
        implementation kotlinStdlib()
        implementation kotlinReflect()
        implementation "ch.tutteli.atrium:atrium-cc-en_GB-robstoll:$atrium_version", excludeKotlin
    }
}

subprojects {

    apply plugin: 'ch.tutteli.publish'
    tutteliPublish {
        githubUser = 'tegonal'
        bintrayOrganisation = 'tegonal'
        bintrayRepo = 'oss'
        manifestVendor = 'Tegonal GmbH'
        resetLicenses 'EUPL-1.2'
        signWithGpg = false //use bintray's public/private key
    }
}

/*

Release & deploy a commit
--------------------------------
1. search for X.Y.Z-SNAPSHOT and replace with X.Y.Z
2. update version in Setup section in README (search for old version)
3. update master:
    a) point to the tag
        1) change travis badge: replace `branch=master` with `branch=vX.Y.Z`
        2) search for `tree/master` and replace it with `tree/vX.Y.Z`
    b) commit (modified .travis.yml, build.gradle, README.md): git commit -a -m 'vX.Y.Z'
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) export CI=true
    b) ./gr clean publishToBintray
    c) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. point to master
   a) update travis badge: replace `branch=vX.Y.Z` with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
2. search for X.Y.Z and replace with X.Y.Z-SNAPSHOT
3. commit & push changes

*/
